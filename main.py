#MAX MARTIN
#Simple calculator app using tkinter

#region Window Setup
#btw i didnt follow any tutorials for this
#also nothing is generated by ai, all written by me
#i did have to ask chatgpt about the correct syntax to do the readonly entry thing tho
#but other than that its all me :)
#this took about 2 hours to make
import tkinter as tk

#setup the window
root = tk.Tk()
root.title("Calculator App Thing")
root.geometry("415x480")
root.resizable(False, False)

#calculator button layout
#TOP DISPLAY HERE
#7 8 9 x
#4 5 6 -
#1 2 3 +
#0 . = /

displayFont = "Arial", 36

#displayInfo holds the value that is shown in the display
displayInfo = tk.StringVar()
#readonly stops you from typing in the display
#justify right make the text stay on the right side
display = tk.Entry(font=displayFont, width=15, borderwidth=5, state="readonly", justify="right", textvariable=displayInfo)
#put at top and across 4 columns
display.grid(row=0, column=0, columnspan=4)

#endregion

#store the last result val for operation chaining
lastResultValue = None
#clear the screen after pressing = or getting an eerror
clearDisplayOnNextButtonInput = False
def ClearDisplay():
    #i have to change the state so i can change the variable but keep it readonly for the user
    display.config(state="normal")
    displayInfo.set("")
    display.config(state="readonly")

def OnButtonClicked(buttonValue):
    global lastResultValue
    #clear the screen if already has stuff from a previous calc
    global clearDisplayOnNextButtonInput
    if clearDisplayOnNextButtonInput:
        ClearDisplay()
        clearDisplayOnNextButtonInput = False

    #if equals was clicked do the maths
    if buttonValue == "=":
        clearDisplayOnNextButtonInput = True
        OnEqualsClicked()
        return

    #list of valid operation buttons
    operationButtons = [
        "/", "+", "-", "*"
    ]

    #Check the following to allow operation chaining:
    #nothing in the display
    # a previous calculation was done
    #button value is an operation button
    if display.get() == "" and lastResultValue is not None and buttonValue in operationButtons:
        newValue = lastResultValue + str(buttonValue)
    else:
        # get the val in the display
        currentValue = displayInfo.get()
        # append it to the display
        newValue = currentValue + str(buttonValue)

    #put the new value in the display
    display.config(state="normal")
    displayInfo.set(newValue)
    display.config(state="readonly")

def OnEqualsClicked():
    global lastResultValue
    #get the current value on the disply
    currentValue = displayInfo.get()
    #try/catch so it dosnt break :)
    #basicly eval() takes a string and does the maths in it
    #if it fails it will go to except
    #if successful it will show the result on the displuy
    try:
        #do the maths and turn into a string
        #this is the point that would fail, eval() is a built in function
        result = str(eval(currentValue))
        #save result for operation chaining
        lastResultValue = result
        #show the result
        display.config(state="normal")
        displayInfo.set(result)
        display.config(state="readonly")

    #if there is an error with eval() display error rather than breaking :)
    #also this works for divide by 0 exeption as well as general syntax errors
    except Exception:
        display.config(state="normal")
        displayInfo.set("Syntax Error")
        display.config(state="readonly")


#region Setup Buttons
#makes it esily change later
buttonFont = "Arial", 24
buttonWidth = 4
buttonHeight = 2
buttonPadding = 2

#tuple store button string and grid position
#button number, row, collum
buttons = [
    ("7", 1, 0), ("8", 1, 1), ("9", 1, 2), ("*", 1, 3),
    ("4", 2, 0), ("5", 2, 1), ("6", 2, 2), ("-", 2, 3),
    ("1", 3, 0), ("2", 3, 1), ("3", 3, 2), ("+", 3, 3),
    ("0", 4, 0), (".", 4, 1), ("=", 4, 2), ("/", 4, 3)
]

for (name, row, column) in buttons:
    button = tk.Button(text=name, font=buttonFont, width=buttonWidth, height=buttonHeight, command=lambda val=name: OnButtonClicked(val))
    button.grid(row=row, column=column, sticky="nsew", padx=buttonPadding, pady=buttonPadding)

#endregion

root.mainloop()